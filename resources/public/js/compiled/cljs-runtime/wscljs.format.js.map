{"version":3,"sources":["wscljs/format.cljs"],"mappings":"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","names":["wscljs$format$Format$read$dyn","x__4550__auto__","m__4551__auto__","wscljs.format/read","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","wscljs$format$Format$write$dyn","wscljs.format/write","wscljs.format/Format","formatter","string","value","wscljs.format/identity","js/wscljs","js/wscljs.format","js/wscljs.format.t_wscljs$format29139","wscljs.format/t_wscljs$format29139","_29141","meta29140","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","wscljs.format/->t_wscljs$format29139","_","s","v","wscljs.format/json","js/wscljs.format.t_wscljs$format29148","wscljs.format/t_wscljs$format29148","_29150","meta29149","wscljs.format/->t_wscljs$format29148","cljs.core.js__GT_clj","js/JSON.parse","js/JSON.stringify","cljs.core/clj->js","wscljs.format/edn","js/wscljs.format.t_wscljs$format29151","wscljs.format/t_wscljs$format29151","_29153","meta29152","wscljs.format/->t_wscljs$format29151","cljs.reader.read_string","cljs.core.prn_str"],"sourcesContent":["(ns wscljs.format\n  (:refer-clojure :exclude [identity])\n  (:require [cljs.reader :as reader]))\n\n\n(defprotocol Format\n  \"Protocol used to define encoding format for socket messages.\"\n  (read  [formatter string])\n  (write [formatter value]))\n\n\n(def identity\n  \"The identity formatter. Does nothing to the input or output.\"\n  (reify Format\n    (read  [_ s] s)\n    (write [_ v] v)))\n\n\n(def json\n  \"Read and write data encoded in JSON.\"\n  (reify Format\n    (read  [_ s] (js->clj (js/JSON.parse s) :keywordize-keys true))\n    (write [_ v] (js/JSON.stringify (clj->js v)))))\n\n(def edn\n  \"Read and write data serialized as EDN.\"\n  (reify Format\n    (read [_ s] (reader/read-string s))\n    (write [_ v] (prn-str v))))\n"]}